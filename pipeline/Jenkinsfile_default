def call() {

    Map opts = [:]
    //opts.jenkinsNode = 'Windows'
    opts.projectName = 'dotnet-application'
    
    pipeline {
        agent {
            // Which Jenkins node to build on
            label 'jk-w2'
        }

        options {
            // Colorize the terminal output
            ansiColor('xterm')
            // the build should never take this long
            timeout(time: 1, unit: 'HOURS')
            // add timestamps to log output
            timestamps()
            // disable parallel buildchain
            disableConcurrentBuilds()
        }

        environment {
            PROJECT_NAME = "${opts.projectName}"
        }

        stages {
            stage('Initialise') {
                steps {
                    cleanWs()
                    checkout scm
                    script {
                        env.APP_VERSION = readFile('version.txt').trim()
                        echo "App version set to ${env.APP_VERSION}"
                    }
                }
            }
            stage('Build dotnet') {
                steps {
                    script { 

                        env.SONAR_SCANNER_NET = tool("sonarscanner-net")

                        withSonarQubeEnv('sonar.local') {
                            pwsh(script: '''
                                dotnet $env:SONAR_SCANNER_NET/SonarScanner.MSBuild.dll begin /k:$env:PROJECT_NAME
                            ''')
                        }

                        pwsh(script: '''
                            dotnet restore
                            dotnet clean
                            dotnet build -c Release --no-restore
                        ''')

                        pwsh(script: '''
                            dotnet test -c Release --results-directory:$env:WORKSPACE/Test_Results --collect 'Code Covarage'
                        ''')

                        withSonarQubeEnv('sonar.local') {
                            pwsh(script: '''
                                dotnet $env:SONAR_SCANNER_NET/SonarScanner.MSBuild.dll end
                            ''')
                        }
                        
                        pwsh(script: 'ls')
                        
                        timeout(time: 1, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: false
                        }

                    }
                }
            }
        }

        post {
            success {
                archiveArtifacts artifacts: 'ApplicationTemplate/bin/Release/net9.0/**',
                                fingerprint: true,
                                allowEmptyArchive: false
            }
        }
    }
}

call()
