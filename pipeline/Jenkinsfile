def call() {

    Map opts = [:]
    //opts.jenkinsNode = 'Windows'
    opts.projectName = 'dotnet-application'

    pipeline {
        agent {
            // Which Jenkins node to build on
            label 'jk-w2'
        }

        options {
            // Colorize the terminal output
            ansiColor('xterm')
            // the build should never take this long
            timeout(time: 1, unit: 'HOURS')
            // add timestamps to log output
            timestamps()
            // disable parallel buildchain
            disableConcurrentBuilds()
        }

        environment {
            PROJECT_NAME = "${opts.projectName}"
        }

        stages {
            stage('Initialise') {
                steps {
                    cleanWs()
                    checkout scm
                }
            }

            stage('SonarQubeBegin record') {
                steps {
                    script {
                        withSonarQubeEnv('sonar.local') {
                            pwsh(script: '''
                                ./build.ps1 --target SonarQubeBegin
                            ''')
                        }
                    }
                }
            }

            stage('Build dotnet') {
                steps {
                    script { 
                        pwsh(script: '''
                            ./build.ps1
                        ''')

                        pwsh(script: 'ls')
                    }
                    //nunit(testResultsPattern: 'src/*.UnitTests.xml', failIfNoResults: true)
                }
            }

            stage('SonarQubeEnd record') {
                steps {
                    script {
                        withSonarQubeEnv('sonar.local') {
                            pwsh(script: '''
                                ./build.ps1 --target SonarQubeEnd
                            ''')
                        }

                        timeout(time: 1, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: false
                        }
                    }
                }
            }

        }

        post {
            success {
                archiveArtifacts artifacts: 'ApplicationTemplate/bin/Release/net9.0/**',
                                fingerprint: true,
                                allowEmptyArchive: false
            }
        }
    }
}

call()
